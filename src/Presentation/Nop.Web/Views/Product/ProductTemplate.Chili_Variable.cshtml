@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper 
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    ////open graph META tags
    //if (seoSettings.OpenGraphMetaTags)
    //{
    //    Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    //    Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    //}

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    Model.AddToCart.ChiliDisableBuyButton = true;
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
<div class="page product-details-page">
    <div class="page-body">
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <!--product pictures-->
                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                <!--Template Widget Area-->
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ChiliTemplateEditor, additionalData = Model })
                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                {
                    <div class="short-description">
                        @Html.Raw(Model.ShortDescription)
                    </div>
                }
                @{
                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                    @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                }
                <!--price & add to cart-->
                @{
                    var dataDictPrice = new ViewDataDictionary(ViewData);
                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                    
                }
                @if (!string.IsNullOrEmpty(Model.FullDescription))
                {
                    <div class="full-description" itemprop="description">
                        @Html.Raw(Model.FullDescription)
                    </div>
                }

                <div class="product-collateral">
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })

            </div>
        </form>
       
    </div>
</div>