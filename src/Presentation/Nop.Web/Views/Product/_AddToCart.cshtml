@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders
@if (Model.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden"/>
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    <div class="add-to-cart">
        @if (Model.CustomerEntersPrice)
        {
            <div class="customer-entered-price">
                <div class="price-input">
                    <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                    @*round price*@
                    <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="enter-price-input" />
                </div>
                <div class="price-range">
                    @Model.CustomerEnteredPriceRange
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
        {
            <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
        }
        @if (!Model.DisableBuyButton)
        {
    <div class="add-to-cart-panel">
        <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>
        @if (Model.AllowedQuantities.Count > 0)
        {
            <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="qty-dropdown"></select>
        }
        else
        {
            <input asp-for="EnteredQuantity" class="qty-input" type="text" />
            <script asp-location="Footer">
                        //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                $(document).ready(function () {
                    var buttonId = "#add-to-cart-button-@Model.ProductId"
                    var buttonDisabled = $("#add-to-cart-button-@Model.ProductId").attr('disabled');
                    console.log('Checking button disabled config: ' + buttonId + ' = ' + buttonDisabled);
                    //Set up disabled button if needed
                    if (buttonDisabled == 'disabled') {
                        console.log('In button disabled config');
                        $("#add-to-cart-button-@Model.ProductId").css('opacity', .3);
                        $("#add-to-cart-button-@Model.ProductId").prop('title', 'Edit and Save before Adding to Cart');
                    }
                    $("#@Html.IdFor(model => model.EnteredQuantity)").on("keydown", function (event) {
                        buttonDisabled = $("#add-to-cart-button-@Model.ProductId").attr('disabled');
                        console.log('got disabled value:(' + buttonDisabled + ')');
                        if (event.keyCode == 13 && buttonDisabled != 'disabled') {
                            $("#add-to-cart-button-@Model.ProductId").trigger("click");
                            return false;
                        }
                    });
                });
            </script>
        }
        @{
            var addToCartText = "";

            //RequiresEditor?
            var cartButtonId = $"add-to-cart-button-{Model.ProductId}";
            var chiliDisableValue = Model.RequiresEditor ? "disabled" : "";
            if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
            {
                addToCartText = T("ShoppingCart.AddToCart.Update").Text;
            }
            else
            {
                addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
            }
            <input type="button" @chiliDisableValue id="@cartButtonId" class="button-1 add-to-cart-button" value="@addToCartText" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;" />
        }
    </div>
            if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
            {
                <div class="pre-order-availability-date">
                    <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                    @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
    </div>
}